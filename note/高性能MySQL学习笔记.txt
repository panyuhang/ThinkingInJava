--------------------------------------------------------------------高性能MySQL学习心得--------------------------------------------------------------------
第一章 MySQL架构与历史
	1.4 多版本并发控制（MVCC）
		InnoDB的MVCC，是通过在每行记录后面保存的两个隐藏得列（保存的是系统版本号）来实现的。
		Insert 为插入的每一行保存当前的系统版本号作为行版本号。
		Delete 为删除的每一行保存当前系统版本号作为删除标识。
		Update InnoDB为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识。
		MVCC只在 REPEATEABLE READ 和 READ COMMITTED两个隔离级别下工作。
	1.5 MySQL的存储引擎
--------------------------------------------------------------------------------------------------------------------------------------------------------------
第二章 MySQL基准测试
基准测试有两种主要的策略：
	集成式（full-stack）：针对整个系统的整体测试。
		测试整个应用系统，包括Web服务器、应用代码、网络和数据库。
		MySQL并非总是应用的瓶颈
		只有对应用做整体测试，才能发现各部分之间的缓存带来的影响
		整体应用的集成式测试更能揭示应用的真是表现，单独测试很难做到这一点
	单组件式（single-component）：单独测试MySQL。
		需要比较不同的schema或查询的性能
		针对应用中某个具体问题的测试
		为了避免漫长的基础测试，可以通过一个短期的基准测试，做快速的“周期循环”，来检测出某些调整后的效果。

--------------------------------------------------------------------------------------------------------------------------------------------------------------
第四章
	4.1 选择优化的数据类型
		1、一般情况下应尽量使用可以正确存储数据的最小数据类型。（占用更少的磁盘、内存和CPU缓存，处理的CPU周期也更少）。
		2、简单就好，例如整型比字符操作代价更低（字符集和校对规则排序规则让字符操作更复杂）。用内建的类型存储数据，例如不要用字符串来存储日期，IP地址用整型来存储。
		3、尽量避免NULL。因为NULL的列使得索引、索引统计和值比较都更复杂。但NULL列改为NOT NULL列带来的性能提升比较小。InnoDB数据引擎使用单独的位(bit)存储NULL值，对
		与稀疏数据有很好的空间效率，MyISAM不适用。
		4、DATETIME和TIMESTAMP列都可以存储相同的数据：时间和日期，精确到秒。然而TIMESTAMP只使用一半的存储空间，并且会根据时区而变化，具有特殊的自动更新能力。另一方
		面，TIMESTAMP允许的时间范围要小得多，有时候它的特殊能力会成为障碍。
		